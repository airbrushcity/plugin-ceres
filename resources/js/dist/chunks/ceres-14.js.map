{"version":3,"sources":["webpack:///resources/js/src/app/components/item/VariationSelect.vue","webpack:///./resources/js/src/app/components/item/VariationSelect.vue","webpack:///./node_modules/core-js/internals/object-to-array.js","webpack:///./node_modules/core-js/modules/es.object.entries.js","webpack:///./node_modules/core-js/modules/es.object.values.js","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?2512","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?7032","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?aaed"],"names":["name","props","forceContent","type","default","inject","itemId","data","filteredVariationsCache","lastContentCount","mounted","computed","currentVariation","currentVariationSelect","hasEmptyOption","addPleaseSelectOption","currentSelection","possibleUnits","variations","variation","possibleUnitCombinationIds","isContentVisible","hasSelection","attributes","selectedAttributes","selectedUnit","methods","selectAttribute","attributeId","attributeValueId","selectUnit","unitId","onSelectionChange","unsetInvalidSelection","getTooltip","attribute","attributeValue","value","getInvalidOptionTooltip","invalidSelections","invalidSelection","names","getQualifiedVariations","getClosestVariations","qualifiedVariations","changes","closestSalableVariation","numberOfSalableChanges","closestNonSalableVariation","numberOfNonSalableChanges","getInvalidSelectionByVariation","selectedAttributeId","attributesToReset","newUnit","correctSelection","attributeToReset","messages","NotificationService","closeAfter","filterVariations","strict","ignoreUnit","variationAttribute","isAttributeSelectionValid","filterSalableVariations","isUnitSelectionValid","filter","length","setVariation","variationId","document","detail","documents","isTextCut","content","getSelectedAttributeValueName","transformPossibleUnits","unitA","unitB","splitUnitName","unitName","unitNameSplit","watch","render","_vm","_c","_self","staticClass","_l","index","key","ref","refInFor","attrs","id","on","change","$event","target","domProps","_v","_s","$translate","_e","selected","values","directives","rawName","expression","for","title","class","images","active","invalid","click","src","imageUrl","alt","unitCombinationId","parseInt","_t","staticRenderFns","_withStripped"],"mappings":"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","file":"chunks/ceres-14.js","sourcesContent":["<template>\n    <div class=\"row\">\n        <template v-if=\"attributes.length || (possibleUnitCombinationIds.length > 1 && isContentVisible)\">\n            <div class=\"col-12 variation-select\" v-for=\"(attribute, index) in attributes\" :key=\"index\">\n                <!-- dropdown -->\n                <div class=\"input-unit\" ref=\"attributesContaner\" v-if=\"attribute.type === 'dropdown'\">\n                    <select :id=\"'custom-select_' + attribute.name\" class=\"custom-select\" @change=\"selectAttribute(attribute.attributeId, $event.target.value)\" data-testing=\"variation-select-dropdown\">\n                        <option :value=\"-1\" v-if=\"addPleaseSelectOption || !hasSelection\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</option>\n                        <option\n                                :value=\"null\" v-if=\"hasEmptyOption || selectedAttributes[attribute.attributeId] === null\"\n                                :selected=\"selectedAttributes[attribute.attributeId] === null\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</option>\n                        <option\n                                v-for=\"value in attribute.values\"\n                                :value=\"value.attributeValueId\"\n                                :selected=\"value.attributeValueId === selectedAttributes[attribute.attributeId]\"\n                                :key=\"value.attributeValueId\">\n                            <template v-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true)\">\n                                {{ value.name }}\n                            </template>\n                            <template v-else-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, false)\">\n                                {{ $translate(\"Ceres::Template.singleItemNotSalableAttribute\", { \"name\": value.name }) }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": value.name }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label :for=\"'custom-select_' + attribute.name\" v-tooltip=\"isTextCut(attribute.name)\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"attribute.name\" data-testing=\"variation-select-dropdown-label\">{{ attribute.name }}</label>\n                </div>\n                <!-- /dropdown -->\n\n                <!-- box and image -->\n                <div v-else-if=\"attribute.type === 'box' || attribute.type === 'image'\">\n                    <span class=\"text-muted\" data-testing=\"attribute-name\">{{ attribute.name }}:</span> <b data-testing=\"attribute-value\">{{ getSelectedAttributeValueName(attribute) }}</b>\n                    <div class=\"v-s-boxes py-3\" :class=\"{ 'images': attribute.type === 'image' }\">\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"addPleaseSelectOption\"\n                             @click=\"selectAttribute(attribute.attributeId, -1)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === -1, 'invalid': !isAttributeSelectionValid(attribute.attributeId, -1) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</span>\n                        </div>\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"hasEmptyOption\"\n                             @click=\"selectAttribute(attribute.attributeId, null)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === null, 'invalid': !isAttributeSelectionValid(attribute.attributeId, null, true) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</span>\n                        </div>\n\n                        <div class=\"v-s-box bg-white\"\n                             data-testing=\"variation-select-box\"\n                             v-for=\"value in attribute.values\"\n                             @click=\"selectAttribute(attribute.attributeId, value.attributeValueId)\"\n                             :class=\"{ 'active': value.attributeValueId === selectedAttributes[attribute.attributeId], 'invalid': !isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true) }\"\n                             v-tooltip=\"true\" data-html=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" :data-original-title=\"getTooltip(attribute, value)\"\n                             :key=\"value.attributeValueId\">\n                            <span class=\"mx-3\" v-if=\"attribute.type === 'box'\">{{ value.name }}</span>\n                            <img class=\"p-1\" v-else :src=\"value.imageUrl\" :alt=\"value.name\">\n                        </div>\n                    </div>\n                </div>\n                <!-- /box and image -->\n            </div>\n\n            <!-- units -->\n            <div class=\"col-12 variation-select\" v-if=\"possibleUnitCombinationIds.length > 1 && isContentVisible\">\n                <div class=\"input-unit\">\n                    <select id=\"unit-combination-ids-select\" class=\"custom-select\" @change=\"selectUnit($event.target.value)\" data-testing=\"variation-select-unit\">\n                        <option\n                                v-for=\"unitCombinationId in possibleUnitCombinationIds\"\n                                :value=\"unitCombinationId\"\n                                :selected=\"parseInt(unitCombinationId) === selectedUnit\"\n                                :key=\"unitCombinationId\">\n                            <template v-if=\"isUnitSelectionValid(unitCombinationId)\">\n                                {{ possibleUnits[unitCombinationId] }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": possibleUnits[unitCombinationId] }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label for=\"unit-combination-ids-select\" data-testing=\"variation-select-unit-label\">{{ $translate(\"Ceres::Template.singleItemContent\") }}</label>\n                </div>\n            </div>\n            <!-- /units -->\n        </template>\n\n        <template v-else>\n            <slot></slot>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { textWidth } from \"../../helper/dom\";\nimport { isDefined, isNull, isNullOrUndefined } from \"../../helper/utils\";\n\nconst NotificationService = require(\"../../services/NotificationService\");\n\nexport default {\n\n    name: \"variation-select\",\n\n    props: {\n        forceContent:\n        {\n            type: Boolean,\n            default: false\n        }\n    },\n\n    inject: {\n        itemId: {\n            default: null\n        }\n    },\n\n    data()\n    {\n        return {\n            filteredVariationsCache: {},\n            lastContentCount: 0\n        };\n    },\n\n    mounted()\n    {\n        // initially check for valid selection and disable add to basket button\n        this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!this.currentSelection);\n    },\n\n    computed:\n    {\n        currentVariation() {\n            return this.$store.getters[`${this.itemId}/currentItemVariation`];\n        },\n\n        currentVariationSelect() {\n            return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect;\n        },\n\n        /**\n         * returns true if any variation has no attributes\n         */\n        hasEmptyOption()\n        {\n            return this.variations.some(variation => !variation.attributes.length);\n        },\n\n        addPleaseSelectOption()\n        {\n            return App.config.item.showPleaseSelect;\n        },\n\n        /**\n         * returns the variation, based on the selected attributes / unit\n         * returns false if there are none or multiple results\n         */\n        currentSelection()\n        {\n            const filteredVariations = this.filterVariations(null, null, true);\n\n            if (filteredVariations.length === 1)\n            {\n                return filteredVariations[0];\n            }\n\n            return false;\n        },\n\n        /**\n         * returns all units, selectable by current selection\n         * prop 'forceContent' with value true will return all units, without filtering\n         */\n        possibleUnits()\n        {\n            // use an object, to make the entries unique\n            const possibleUnits = {};\n            const variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\n\n            for (const variation of variations)\n            {\n                possibleUnits[variation.unitCombinationId] = variation.unitName;\n            }\n\n            return possibleUnits;\n        },\n\n        possibleUnitCombinationIds()\n        {\n            return this.transformPossibleUnits(this.possibleUnits).map(value => value[0]);\n        },\n\n        isContentVisible()\n        {\n            return !this.forceContent && !!this.currentSelection || this.forceContent;\n        },\n\n        hasSelection()\n        {\n            return !isNullOrUndefined(this.selectedAttributes) && !Object.values(this.selectedAttributes).some((value) => value < 0);\n        },\n\n        attributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.attributes;\n        },\n\n        selectedAttributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedAttributes;\n        },\n\n        selectedUnit() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedUnit;\n        },\n\n        variations() {\n            return this.currentVariationSelect && this.currentVariationSelect.variations;\n        }\n    },\n\n    methods:\n    {\n        /**\n         * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        selectAttribute(attributeId, attributeValueId)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n\n            if (this.selectedAttributes[attributeId] !== attributeValueId)\n            {\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemAttribute`, { attributeId, attributeValueId });\n                this.onSelectionChange(attributeId, attributeValueId, null);\n            }\n        },\n\n        /**\n         * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {[number, string]} unitId\n         */\n        selectUnit(unitId)\n        {\n            unitId = parseInt(unitId);\n            this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, unitId);\n            this.onSelectionChange(null, null, unitId);\n        },\n\n        onSelectionChange(attributeId, attributeValueId, unitId)\n        {\n            if (this.currentSelection)\n            {\n                this.setVariation(this.currentSelection.variationId);\n            }\n            else if (!this.hasSelection)\n            {\n                // user switched back to \"please select\"\n                this.setVariation(0);\n            }\n            else\n            {\n                this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\n            }\n\n            this.lastContentCount = this.possibleUnitCombinationIds.length;\n        },\n\n        /**\n         * changes the selected attributes / unit, to ensure a valid seelction\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        unsetInvalidSelection(attributeId, attributeValueId, unitId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\n            const closestVariations = this.getClosestVariations(qualifiedVariations);\n            \n            // if the salable 'closestVariations' is undefined, take the not-salable one\n            const closestVariation = closestVariations[0] || closestVariations[1];\n\n            if (!closestVariation)\n            {\n                return;\n            }\n\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n\n            this.correctSelection(invalidSelection);\n        },\n\n        getTooltip(attribute, attributeValue)\n        {\n            if(!this.isAttributeSelectionValid(attribute.attributeId, attributeValue.attributeValueId, true))\n            {\n                return this.getInvalidOptionTooltip(attribute.attributeId, attributeValue.attributeValueId);\n            }\n            else if(attribute.type === \"image\")\n            {\n                return this.$translate(\"Ceres::Template.singleItemAttributeTooltip\", {\n                    attribute: attribute.name,\n                    value: attributeValue.name\n                });\n            }\n\n            return \"\";\n        },\n\n        /**\n         * returns a string for box tooltips, for not available options\n         * @param {number} attributeId\n         * @param {number} attributeValueId\n         */\n        getInvalidOptionTooltip(attributeId, attributeValueId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\n            const closestVariations   = this.getClosestVariations(qualifiedVariations);\n\n            if (!closestVariations || closestVariations.length <= 0)\n            {\n                return \"\";\n            }\n\n            const invalidSelections = [\n                !!closestVariations[0] ? this.getInvalidSelectionByVariation(closestVariations[0]) : null,\n                !!closestVariations[1] ? this.getInvalidSelectionByVariation(closestVariations[1]) : null\n            ];\n\n            if (!!invalidSelections[0]\n                && !!invalidSelections[1]\n                && invalidSelections[0].attributesToReset.length > invalidSelections[1].attributesToReset.length)\n            {\n                // there is a non-salable variation with less changes\n                return this.$translate(\"Ceres::Template.singleItemNotSalable\");\n            }\n\n            const invalidSelection = invalidSelections[0] || invalidSelections[1];\n            const names = [];\n\n            for (const attribute of invalidSelection.attributesToReset)\n            {\n                if (attribute.attributeId !== attributeId)\n                {\n                    names.push(\"<b>\" + attribute.name +\"</b>\");\n                }\n            }\n            if (invalidSelection.newUnit)\n            {\n                names.push(\n                    \"<b>\" + this.$translate(\"Ceres::Template.singleItemContent\") + \"</b>\"\n                );\n            }\n\n            if (!names.length)\n            {\n                return null;\n            }\n\n            return this.$translate(\"Ceres::Template.singleItemNotAvailableInSelection\", { name: names.join(\", \") });\n        },\n\n        /**\n         * returns a list of variations, filtered by attribute or unit\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        getQualifiedVariations(attributeId, attributeValueId, unitId)\n        {\n            if (isDefined(attributeValueId))\n            {\n                return this.variations.filter(variation =>\n                {\n                    return isDefined(variation.attributes.find(attribute =>\n                        attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId));\n                });\n            }\n            else if (isDefined(unitId))\n            {\n                return this.variations.filter(variation => variation.unitCombinationId === unitId);\n            }\n\n            return this.variations.filter(variation => !variation.attributes.length);\n        },\n\n        /**\n         * return a salable and a non-salable variation with the minimum number of changes on attributes compared to the current selection.\n         * @param {array} qualifiedVariations\n         */\n        getClosestVariations(qualifiedVariations)\n        {\n            let closestSalableVariation, numberOfSalableChanges;\n            let closestNonSalableVariation, numberOfNonSalableChanges;\n\n            for (const variation of qualifiedVariations)\n            {\n                let changes = 0;\n\n                if (variation.unitCombinationId !== this.selectedUnit && !isNull(this.selectedUnit))\n                {\n                    // when the unit dropdown isn't visible, it should have a lower weight for reset investigations\n                    const unitWeight = this.possibleUnitCombinationIds.length > 1 && this.isContentVisible ? 0.9 : 0.1;\n\n                    changes += unitWeight;\n                }\n\n                for (const attribute of variation.attributes)\n                {\n                    if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId)\n                    {\n                        changes++;\n                    }\n                }\n\n                if(variation.isSalable && (!numberOfSalableChanges || changes < numberOfSalableChanges))\n                {\n                    closestSalableVariation = variation;\n                    numberOfSalableChanges = changes;\n                }\n                else if (!variation.isSalable && (!numberOfNonSalableChanges || changes < numberOfNonSalableChanges))\n                {\n                    closestNonSalableVariation = variation;\n                    numberOfNonSalableChanges = changes;\n                }\n            }\n\n            return [closestSalableVariation, closestNonSalableVariation];\n        },\n\n        /**\n         * returns object with array 'attributesToReset' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\n         * @param {object} variation\n         */\n        getInvalidSelectionByVariation(variation)\n        {\n            const attributesToReset = [];\n            let newUnit = null;\n\n            for (let selectedAttributeId in this.selectedAttributes)\n            {\n                selectedAttributeId = parseInt(selectedAttributeId);\n                const variationAttribute = variation.attributes.find(attribute => attribute.attributeId === selectedAttributeId);\n\n                if (!isNull(this.selectedAttributes[selectedAttributeId]))\n                {\n                    if (variationAttribute && variationAttribute.attributeValueId !== this.selectedAttributes[selectedAttributeId] || !variationAttribute)\n                    {\n                        const attributeToReset = this.attributes.find(attr => attr.attributeId === selectedAttributeId);\n\n                        attributesToReset.push(attributeToReset);\n                    }\n                }\n            }\n\n            if (variation.unitCombinationId !== this.selectedUnit)\n            {\n                newUnit = variation.unitCombinationId;\n            }\n\n            return { attributesToReset, newUnit };\n        },\n\n        /**\n         * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\n         * @param {object} invalidSelection\n         */\n        correctSelection(invalidSelection)\n        {\n            const messages   = [];\n            const attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            for (const attributeToReset of invalidSelection.attributesToReset)\n            {\n                messages.push(\n                    this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name: attributeToReset.name })\n                );\n\n                attributes[attributeToReset.attributeId] = (!this.hasEmptyOption && App.config.item.showPleaseSelect) ? -1 : null;\n            }\n\n            if (invalidSelection.newUnit)\n            {\n                if (this.lastContentCount > 1 && this.possibleUnitCombinationIds.length > 1 && !isNull(this.selectedUnit))\n                {\n                    messages.push(\n                        this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name:\n                                this.$translate(\"Ceres::Template.singleItemContent\")\n                        })\n                    );\n                }\n\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, invalidSelection.newUnit);\n            }\n\n            this.$store.commit(`${this.itemId}/variationSelect/setItemSelectedAttributes`, attributes);\n\n            this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\n\n            NotificationService.warn(\n                messages.join(\"<br>\")\n            ).closeAfter(5000);\n        },\n\n        /**\n         * returns matching variations with current selection\n         * attributes and unitId could be filled, to check a specific selection\n         * @param {object} attributes\n         * @param {number} unitId\n         * @param {boolean} strict\n         */\n        filterVariations(attributes, unitId, strict, ignoreUnit)\n        {\n            attributes = attributes || this.selectedAttributes;\n            unitId = unitId || this.selectedUnit;\n            strict = !!strict;\n            ignoreUnit = !!ignoreUnit;\n\n            const key = JSON.stringify(attributes) + \"_\" + unitId + \"_\" + strict + \"_\" + ignoreUnit;\n\n            if (isDefined(this.filteredVariationsCache[key]))\n            {\n                return this.filteredVariationsCache[key];\n            }\n\n            const uniqueValues = [...new Set(Object.values(attributes))];\n            const isEmptyOptionSelected = uniqueValues.length === 1 && isNull(uniqueValues[0]);\n            const filteredVariations = this.variations.filter(variation =>\n            {\n                // the selected unit is not matching\n                if (!ignoreUnit && variation.unitCombinationId !== unitId)\n                {\n                    return false;\n                }\n\n                // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\n                // requires more than 0 attributes\n                if (((!isEmptyOptionSelected && !variation.attributes.length) || (isEmptyOptionSelected && variation.attributes.length))\n                    && this.attributes.length > 0)\n                {\n                    return false;\n                }\n\n                for (const attributeId in attributes)\n                {\n                    const variationAttribute = variation.attributes.find(variationAttribute =>\n                        variationAttribute.attributeId === parseInt(attributeId));\n\n                    // an attribute is not matching with selection\n                    if (variationAttribute &&\n                        variationAttribute.attributeValueId !== attributes[attributeId] &&\n                        (strict || !strict && !isNull(attributes[attributeId]) && attributes[attributeId] !== -1))\n                    {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            this.filteredVariationsCache[key] = filteredVariations;\n\n            return filteredVariations;\n        },\n\n        /**\n         * returns true, if the selection with a new attribute value would be valid\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         * @param {boolean} filterSalableVariations\n         */\n        isAttributeSelectionValid(attributeId, attributeValueId, filterSalableVariations)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n            if (this.selectedAttributes[attributeId] === attributeValueId)\n            {\n                return true;\n            }\n\n            const selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\n\n            const ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\n            let variations = this.filterVariations(selectedAttributes, null, null, ignoreUnit);\n\n            if (filterSalableVariations)\n            {\n                variations = variations.filter(variation => variation.isSalable)\n            }\n\n            return variations.length > 0;\n        },\n\n        /**\n         * returns true, if the selection with a new unitId would be valid\n         * @param {[number, string]} unitId\n         */\n        isUnitSelectionValid(unitId)\n        {\n            unitId = parseInt(unitId);\n            if (this.selectedUnit === unitId)\n            {\n                return true;\n            }\n\n            return this\n                .filterVariations(null, unitId)\n                .filter(variation => variation.isSalable)\n                .length > 0\n        },\n\n        /**\n         * dispatch vuex action 'loadVariation' to archive a variation\n         * dispatches a custom event named 'onVariationChanged'\n         * @param {[string, number, null]} variationId\n         */\n        setVariation(variationId)\n        {\n            if (!isDefined(variationId) && this.currentSelection)\n            {\n                variationId = this.currentSelection.variationId;\n            }\n\n            if (isDefined(variationId))\n            {\n                this.$store.dispatch(`${this.itemId}/loadVariation`, variationId).then(variation =>\n                {\n                    document.dispatchEvent(new CustomEvent(\"onVariationChanged\",\n                        {\n                            detail:\n                                {\n                                    attributes: variation.attributes,\n                                    documents: variation.documents,\n                                    itemId: this.itemId\n                                }\n                        }));\n                });\n            }\n        },\n\n        isTextCut(content)\n        {\n            if (this.$refs.attributesContaner)\n            {\n                return textWidth(content, \"Custom-Font, Helvetica, Arial, sans-serif\") > this.$refs.attributesContaner[0].clientWidth;\n            }\n\n            return false;\n        },\n\n        getSelectedAttributeValueName(attribute)\n        {\n            const selectedAttributeValueId =  this.selectedAttributes[attribute.attributeId];\n            const selectedAttributeValue = attribute.values.find(attrValue => attrValue.attributeValueId === selectedAttributeValueId);\n\n            if (selectedAttributeValue)\n            {\n                return selectedAttributeValue.name;\n            }\n            else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1)\n            {\n                return this.$translate(\"Ceres::Template.singleItemPleaseSelect\");\n            }\n            return this.$translate(\"Ceres::Template.singleItemNoSelection\");\n        },\n\n        transformPossibleUnits(possibleUnits)\n        {\n            return Object.entries(possibleUnits).sort((unitA, unitB) => {\n                unitA = this.splitUnitName(unitA[1]);\n                unitB = this.splitUnitName(unitB[1]);\n                // order by unit\n                if (unitA[1] < unitB[1]) {\n                    return -1;\n                }\n                if (unitA[1] > unitB[1]) {\n                    return 1;\n                }\n                // order by content (count)\n                if (unitA[0] < unitB[0]) {\n                    return -1;\n                }\n                if (unitA[0] > unitB[0]) {\n                    return 1;\n                }\n                return 0;\n            });\n        },\n        splitUnitName(unitName) {\n            const unitNameSplit = unitName.split(\" \");\n\n            if (!isNaN(unitNameSplit[0])) {\n                unitNameSplit[0] = unitNameSplit[0].replace(App.currencyPattern.separator_thousands, \"\");\n                unitNameSplit[0] = parseInt(unitNameSplit[0]);\n            }\n\n            return unitNameSplit;\n        }\n    },\n\n    watch:\n    {\n        currentSelection(value)\n        {\n            this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!value);\n        },\n        variations()\n        {\n            // FIX unset variation cache after subsequent variations are loaded\n            this.filteredVariationsCache = {};\n        }\n    }\n}\n</script>\n","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"div\",\n    { staticClass: \"row\" },\n    [\n      _vm.attributes.length ||\n      (_vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible)\n        ? [\n            _vm._l(_vm.attributes, function (attribute, index) {\n              return _c(\n                \"div\",\n                { key: index, staticClass: \"col-12 variation-select\" },\n                [\n                  attribute.type === \"dropdown\"\n                    ? _c(\n                        \"div\",\n                        {\n                          ref: \"attributesContaner\",\n                          refInFor: true,\n                          staticClass: \"input-unit\",\n                        },\n                        [\n                          _c(\n                            \"select\",\n                            {\n                              staticClass: \"custom-select\",\n                              attrs: {\n                                id: \"custom-select_\" + attribute.name,\n                                \"data-testing\": \"variation-select-dropdown\",\n                              },\n                              on: {\n                                change: function ($event) {\n                                  return _vm.selectAttribute(\n                                    attribute.attributeId,\n                                    $event.target.value\n                                  )\n                                },\n                              },\n                            },\n                            [\n                              _vm.addPleaseSelectOption || !_vm.hasSelection\n                                ? _c(\"option\", { domProps: { value: -1 } }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemPleaseSelect\"\n                                        )\n                                      )\n                                    ),\n                                  ])\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm.hasEmptyOption ||\n                              _vm.selectedAttributes[attribute.attributeId] ===\n                                null\n                                ? _c(\n                                    \"option\",\n                                    {\n                                      domProps: {\n                                        value: null,\n                                        selected:\n                                          _vm.selectedAttributes[\n                                            attribute.attributeId\n                                          ] === null,\n                                      },\n                                    },\n                                    [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm._l(attribute.values, function (value) {\n                                return _c(\n                                  \"option\",\n                                  {\n                                    key: value.attributeValueId,\n                                    domProps: {\n                                      value: value.attributeValueId,\n                                      selected:\n                                        value.attributeValueId ===\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ],\n                                    },\n                                  },\n                                  [\n                                    _vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(value.name) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : _vm.isAttributeSelectionValid(\n                                          attribute.attributeId,\n                                          value.attributeValueId,\n                                          false\n                                        )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemNotSalableAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemInvalidAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ],\n                                  ],\n                                  2\n                                )\n                              }),\n                            ],\n                            2\n                          ),\n                          _vm._v(\" \"),\n                          _c(\n                            \"label\",\n                            {\n                              directives: [\n                                {\n                                  name: \"tooltip\",\n                                  rawName: \"v-tooltip\",\n                                  value: _vm.isTextCut(attribute.name),\n                                  expression: \"isTextCut(attribute.name)\",\n                                },\n                              ],\n                              attrs: {\n                                for: \"custom-select_\" + attribute.name,\n                                \"data-toggle\": \"tooltip\",\n                                \"data-placement\": \"top\",\n                                title: attribute.name,\n                                \"data-testing\":\n                                  \"variation-select-dropdown-label\",\n                              },\n                            },\n                            [_vm._v(_vm._s(attribute.name))]\n                          ),\n                        ]\n                      )\n                    : attribute.type === \"box\" || attribute.type === \"image\"\n                    ? _c(\"div\", [\n                        _c(\n                          \"span\",\n                          {\n                            staticClass: \"text-muted\",\n                            attrs: { \"data-testing\": \"attribute-name\" },\n                          },\n                          [_vm._v(_vm._s(attribute.name) + \":\")]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"b\",\n                          { attrs: { \"data-testing\": \"attribute-value\" } },\n                          [\n                            _vm._v(\n                              _vm._s(\n                                _vm.getSelectedAttributeValueName(attribute)\n                              )\n                            ),\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          {\n                            staticClass: \"v-s-boxes py-3\",\n                            class: { images: attribute.type === \"image\" },\n                          },\n                          [\n                            _vm.addPleaseSelectOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === -1,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        -1\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          -1\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemPleaseSelect\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm.hasEmptyOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === null,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        null,\n                                        true\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          null\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm._l(attribute.values, function (value) {\n                              return _c(\n                                \"div\",\n                                {\n                                  directives: [\n                                    {\n                                      name: \"tooltip\",\n                                      rawName: \"v-tooltip\",\n                                      value: true,\n                                      expression: \"true\",\n                                    },\n                                  ],\n                                  key: value.attributeValueId,\n                                  staticClass: \"v-s-box bg-white\",\n                                  class: {\n                                    active:\n                                      value.attributeValueId ===\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ],\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    ),\n                                  },\n                                  attrs: {\n                                    \"data-testing\": \"variation-select-box\",\n                                    \"data-html\": \"true\",\n                                    \"data-toggle\": \"tooltip\",\n                                    \"data-placement\": \"top\",\n                                    \"data-original-title\": _vm.getTooltip(\n                                      attribute,\n                                      value\n                                    ),\n                                  },\n                                  on: {\n                                    click: function ($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        value.attributeValueId\n                                      )\n                                    },\n                                  },\n                                },\n                                [\n                                  attribute.type === \"box\"\n                                    ? _c(\"span\", { staticClass: \"mx-3\" }, [\n                                        _vm._v(_vm._s(value.name)),\n                                      ])\n                                    : _c(\"img\", {\n                                        staticClass: \"p-1\",\n                                        attrs: {\n                                          src: value.imageUrl,\n                                          alt: value.name,\n                                        },\n                                      }),\n                                ]\n                              )\n                            }),\n                          ],\n                          2\n                        ),\n                      ])\n                    : _vm._e(),\n                ]\n              )\n            }),\n            _vm._v(\" \"),\n            _vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible\n              ? _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                  _c(\"div\", { staticClass: \"input-unit\" }, [\n                    _c(\n                      \"select\",\n                      {\n                        staticClass: \"custom-select\",\n                        attrs: {\n                          id: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit\",\n                        },\n                        on: {\n                          change: function ($event) {\n                            return _vm.selectUnit($event.target.value)\n                          },\n                        },\n                      },\n                      _vm._l(\n                        _vm.possibleUnitCombinationIds,\n                        function (unitCombinationId) {\n                          return _c(\n                            \"option\",\n                            {\n                              key: unitCombinationId,\n                              domProps: {\n                                value: unitCombinationId,\n                                selected:\n                                  parseInt(unitCombinationId) ===\n                                  _vm.selectedUnit,\n                              },\n                            },\n                            [\n                              _vm.isUnitSelectionValid(unitCombinationId)\n                                ? [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.possibleUnits[unitCombinationId]\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ]\n                                : [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemInvalidAttribute\",\n                                            {\n                                              name: _vm.possibleUnits[\n                                                unitCombinationId\n                                              ],\n                                            }\n                                          )\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ],\n                            ],\n                            2\n                          )\n                        }\n                      ),\n                      0\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"label\",\n                      {\n                        attrs: {\n                          for: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit-label\",\n                        },\n                      },\n                      [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$translate(\"Ceres::Template.singleItemContent\")\n                          )\n                        ),\n                      ]\n                    ),\n                  ]),\n                ])\n              : _vm._e(),\n          ]\n        : [_vm._t(\"default\")],\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var DESCRIPTORS = require('../internals/descriptors');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar $propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\nvar propertyIsEnumerable = uncurryThis($propertyIsEnumerable);\nvar push = uncurryThis([].push);\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {\n        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.es/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.es/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","var $ = require('../internals/export');\nvar $entries = require('../internals/object-to-array').entries;\n\n// `Object.entries` method\n// https://tc39.es/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n","var $ = require('../internals/export');\nvar $values = require('../internals/object-to-array').values;\n\n// `Object.values` method\n// https://tc39.es/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n","import { render, staticRenderFns } from \"./VariationSelect.vue?vue&type=template&id=4a939d05&\"\nimport script from \"./VariationSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./VariationSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"C:\\\\Development\\\\www\\\\plugins\\\\plugin-ceres\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4a939d05')) {\n      api.createRecord('4a939d05', component.options)\n    } else {\n      api.reload('4a939d05', component.options)\n    }\n    module.hot.accept(\"./VariationSelect.vue?vue&type=template&id=4a939d05&\", function () {\n      api.rerender('4a939d05', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/src/app/components/item/VariationSelect.vue\"\nexport default component.exports","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=template&id=4a939d05&\""],"sourceRoot":""}