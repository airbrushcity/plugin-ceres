{% spaceless %}
{% import "Ceres::PageDesign.Macros.IncludeComponents" as Loader %}
{% import "Ceres::PageDesign.Macros.LayoutContainer" as LayoutContainer %}
{% import "Ceres::PageDesign.Macros.Translations" as Translations %}
{{ component( "Ceres::PageDesign.Components.Notifications" ) }}
{{ component( "Ceres::PageDesign.Components.Popper" ) }}
{{ component( "Ceres::Customer.Components.ForgotPassword" ) }}
{% if isShopBuilder %}{% include "Ceres::Widgets.WidgetComponents" %}{% endif %}
{% set isItem = services.template.isItem() == "1" %}
{% set currencyFormat = config("Ceres.currency.format") %}
{% set defaultLanguage = webstoreConfig.defaultLanguage %}
{% endspaceless %}<!DOCTYPE html>
<head>{{ LayoutContainer.show("Ceres::PageDesign.AfterOpeningHeadTag") }}
<html lang="{{ lang }}" data-framework="vue" prefix="og: http://ogp.me/ns#" class="icons-loading">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
{% block PartialHead %}
{% embed getPartial('page-metadata') %}
{% endembed %}
{% endblock %}
{% include getPartial('head') %}
{% for styleTemplate in get_additional_styles() %}
{% include styleTemplate.path ignore missing with styleTemplate.params %}
{% endfor %}
{% if isItem %}{{ LayoutContainer.show("Ceres::SingleItem.Styles") }}{% endif %}
{% block PartialHead2 %}{% endblock %}
{% if assetName == 'ceres-checkout' %}{{ LayoutContainer.show("Ceres::Checkout.Styles") }}{% endif %}

<script>
/*! loadCSS. [c]2017 Filament Group, Inc. MIT License */ 
(function( w ){"use strict"; if( !w.loadCSS ){w.loadCSS=function(){};}var rp=loadCSS.relpreload={}; rp.support=(function(){var ret; try{ret=w.document.createElement( "link" ).relList.supports( "preload" );}catch (e){ret=false;}return function(){return ret;};})(); rp.bindMediaToggle=function( link ){var finalMedia=link.media || "all"; function enableStylesheet(){// unbind listeners if( link.addEventListener ){link.removeEventListener( "load", enableStylesheet );}else if( link.attachEvent ){link.detachEvent( "onload", enableStylesheet );}link.setAttribute( "onload", null ); link.media=finalMedia;}if( link.addEventListener ){link.addEventListener( "load", enableStylesheet );}else if( link.attachEvent ){link.attachEvent( "onload", enableStylesheet );}setTimeout(function(){link.rel="stylesheet"; link.media="only x";}); setTimeout( enableStylesheet, 3000 );}; rp.poly=function(){if( rp.support() ){return;}var links=w.document.getElementsByTagName( "link" ); for( var i=0; i < links.length; i++ ){var link=links[ i]; if( link.rel==="preload" && link.getAttribute( "as" )==="style" && !link.getAttribute( "data-loadcss" ) ){link.setAttribute( "data-loadcss", true ); rp.bindMediaToggle( link );}}}; if( !rp.support() ){rp.poly(); var run=w.setInterval( rp.poly, 500 ); if( w.addEventListener ){w.addEventListener( "load", function(){rp.poly(); w.clearInterval( run );});}else if( w.attachEvent ){w.attachEvent( "onload", function(){rp.poly(); w.clearInterval( run );});}}if( typeof exports !=="undefined" ){exports.loadCSS=loadCSS;}else{w.loadCSS=loadCSS;}}( typeof global !=="undefined" ? global : this ) ); (function(){var checkIconFont=function(){if(!document.fonts || document.fonts.check("1em FontAwesome")){document.documentElement.classList.remove('icons-loading');}}; if(document.fonts){document.fonts.addEventListener("loadingdone", checkIconFont); window.addEventListener("load", checkIconFont);}checkIconFont();})();
</script>
</head>
<body class="{{ bodyClasses | join(' ') }} {% if request.get('openBasketPreview') == 1 %} basket-open{% endif %}">
{{ LayoutContainer.show("Ceres::PageDesign.AfterOpeningBodyTag") }}
<script>
    if('ontouchstart' in document.documentElement)
    {
        document.body.classList.add("touch");
    }
    else
    {
        document.body.classList.add("no-touch");
    }
</script>
<!-- SSR:app() -->
<div id="vue-app" class="app">
    {{ context.renderState() }}
	<lazy-hydrate when-idle>
        <notifications template="#vue-notifications" :initial-notifications="{{ notifications | json_encode() }}"></notifications>
    </lazy-hydrate>
    {% include getPartial('header') %}

    <div id="page-body" class="main">
        {% block PageBody %}{% endblock %}
    </div>

    {% cacheblock %}
        {% include getPartial('footer') %}
        {% block PartialFooter %}{% endblock %}
    {% endcacheblock %}

    <!-- BASKET MODAL -->
    <lazy-load component="add-item-to-basket-overlay">
        <add-item-to-basket-overlay>
            <template slot="extendOverlayButtons">
                {{ LayoutContainer.show("Ceres::Basket.ExtendOverlayButtons") }}
            </template>
        </add-item-to-basket-overlay>
    </lazy-load>
    <!-- ./BASKET MODAL -->

    <!-- PASSWORD RESET MODAL -->
    <lazy-load component="forgot-password-modal">
        <forgot-password-modal :current-template="{{ services.template.getCurrentTemplate() | json_encode }}">
            <template slot="extendOverlayButtons">
                {{ LayoutContainer.show("Ceres::LoginOverlay.ExtendOverlayButtons") }}
            </template>
        </forgot-password-modal>
    </lazy-load>
    <!-- ./PASSWORD RESET MODAL -->

</div>
<!-- /SSR -->


<!-- SSR:global(App) -->
<script id="app-data" type="application/json">
    {
        "config": {{ ceresConfig | json_encode | raw }},
        "urls": {{ urls | json_encode | raw }},
        "activeCurrency": "{{ currencyData[currencyFormat] }}",
        "currencyPattern": {{  services.checkout.getCurrencyPattern() | json_encode | raw }},
        "isCategoryView": {% if services.template.isCategory() == "1" %}true{% else %}false{% endif %},
        "isCheckoutView": {% if services.template.isCheckout() == "1" %}true{% else %}false{% endif %},
        "isSearch": {% if services.template.isSearch() == "1" %}true{% else %}false{% endif %},
        "isItemView": {% if isItem %}true{% else %}false{% endif %},
        "templateEvent": "{{ templateEvent }}",
        "templateType": "{{ urls.templateType }}",
        "language": "{{ lang }}",
        "defaultLanguage": "{{ defaultLanguage }}",
        "decimalSeparator": "{{ config("IO.format.separator_decimal") }}",
        "urlTrailingSlash": {{ urls.appendTrailingSlash | json_encode }},
        "propertyFileUrl": "{{ services.propertyFile.getPropertyFileUrl() }}",
        "isShopBuilder": {{ isShopBuilder | default(false) | json_encode }},
        "bundleSetting": {{ webstoreConfig.dontSplitItemBundle | default(1) }},
        "bundlePrefix": "{{ services.order.getOrderItemPrefix(2) }}",
        "bundleComponentPrefix": "{{ services.order.getOrderItemPrefix(3) }}",
        "initialPleaseSelect": {{ webstoreConfig.attributeSelectDefaultOption | default(0) }},
        "publicPath": "{{ plugin_path('Ceres') ~ '/js/dist/' }}",
        "isCheapestSorting": "{{ services.template.isCheapestSorting() }}",
        "useVariationOrderProperties": {% if webstoreConfig.useVariationOrderProperties | default(0) %}true{% else %}false{% endif %},
        "initialData": {
            "shippingCountries": {{ services.country.getActiveCountriesList() | filterFields(["id", "currLangName", "isoCode2", "states.id", "states.name", "vatCodes"]) | json_encode | raw }},
            "shippingCountryId": {{ services.checkout.getShippingCountryId() }},
            "showNetPrices": {{ showNetPrices | json_encode }}
        },
        "features": {},
        "languageMap": {{ webstoreConfig.browserLanguage | json_encode | raw }}
    }
</script>
<!-- /SSR -->
<script>
    window.App = JSON.parse(document.getElementById("app-data").innerText);
    window.__loadPluginChunk = function(source) {
        return source += "?v={{ buildHash }}";
    };
</script>

{{ Loader.include_components() }}

{{ LayoutContainer.show("Ceres::Script.Loader") }}

{{ Translations.add( "Ceres", "Template" ) }}

{{ get_json_data() }}

{% set minSuffix = '.min' %}
{% if ceresConfig.log.performanceLevel  == 'development' %}
    {% set minSuffix = '' %}
{% endif %}

<!-- SSR:entry({{ ssr_entry('Ceres', 'resources/js/dist/ceres-server' ~ minSuffix ~ '.js') }}) -->
<!-- SSR:on() -->
<script src="{{ plugin_path('Ceres') }}/js/dist/ceres-client{{ minSuffix }}.js?v={{ buildHash }}"></script>
<!-- /SSR -->
<!-- SSR:off() -->
<script src="{{ plugin_path('Ceres') }}/js/dist/{{ assetName }}{{ minSuffix }}.js?v={{ buildHash }}"></script>
<!-- /SSR -->

{% for scriptTemplate in get_additional_scripts() %}
    {% include scriptTemplate.path ignore missing with scriptTemplate.params %}
{% endfor %}

{{ LayoutContainer.show("Ceres::Script.AfterScriptsLoaded") }}

{% if assetName == 'ceres-checkout' %}
    {{ LayoutContainer.show("Ceres::Checkout.AfterScriptsLoaded") }}
{% endif %}

{% if isItem %}
    {{ LayoutContainer.show("Ceres::SingleItem.AfterScriptsLoaded") }}
{% endif %}

<!-- SSR:on() -->
<script>
    window.createApp("#vue-app");
</script>
<!-- /SSR -->

<!-- SSR:off() -->
<script>
    window.vueEventHub = new Vue();
    if (App.config.log.checkSyntax)
    {
        var rootElement = document.getElementById("vue-app");
        rootElement.innerHTML = rootElement.innerHTML.replace(/(?:^|\s)(?::|v-bind:)\S+=(?:""|'')/g, "");
        window.vueApp = new Vue({
            store: window.ceresStore
        });
        vueApp.$mount( rootElement.cloneNode(true) );
        if (vueApp.$el.id === "vue-app")
        {
            document.body.replaceChild( vueApp.$el, rootElement );
        }
    }
    else
    {
        // eslint-disable-next-line no-unused-vars
        window.vueApp = new Vue({
            el: "#vue-app",
            store: window.ceresStore
        });
    }
</script>
<!-- /SSR -->

{% if isShopBuilder %}
    {% include "Ceres::Widgets.ShopBuilderDataStore" %}
{% endif %}

<script>
    {% if request.get("openBasketPreview") == 1 %}window.ceresStore.dispatch("loadComponent", "basket-preview"){% endif %}
    {% if request.get("show") == "forgotPassword" %}window.ceresStore.dispatch("loadComponent", "forgot-password-modal"){% endif %}
</script>

{{ get_filtered_tags() }}

{{ get_shop_builder_scripts( "latest", ceresConfig.log.performanceLevel == 'live') }}

{% if not services.template.shouldBeCached() %}
    <input type="hidden" id="csrf-token" value="{{ csrf_token() }}">
{% endif %}

</body>
</html>
